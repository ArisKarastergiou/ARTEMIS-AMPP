#include "DedispersionDataAnalysisOutput.h"
#include "DedispersionDataAnalysis.h"
#include <QtCore/QFile>
#include <QtCore/QTextStream>
#include "pelican/utility/ConfigNode.h"
#include "pelican/data/DataBlob.h"
#include <iostream>


namespace pelican {

namespace lofar {


/**
 *@details DedispersionDataAnalysisOutput 
 */
DedispersionDataAnalysisOutput::DedispersionDataAnalysisOutput( const ConfigNode& configNode )
    : AbstractOutputStream(configNode)
{
    QString filename = configNode.getOption("file", "name");
    // initialise file connections
    if( filename != "" )
    {
        addFile( filename );
    }
}

/**
 *@details
 */
DedispersionDataAnalysisOutput::~DedispersionDataAnalysisOutput()
{
    foreach( QTextStream* stream, _streams) {
        delete stream;
    }
    foreach( QIODevice* device, _devices ) {
        delete device;
    }
}

void DedispersionDataAnalysisOutput::addFile(const QString& filename)
{
    QFile* file = new QFile(filename);
    if( file->open( QIODevice::WriteOnly ) )
    {
         _devices.append( file );
         QTextStream* out = new QTextStream(file);
         _streams.append(out);
         *out << "# Generated by DedispersionDataAnalysisOutput\n"
              << "# Events\n"
              << "# ------\n"
              << "# Dm|Time|Amplitude\n"
              << "# ------\n";
        _streams.append( out );
    }
    else {
        std::cerr << "DedispersionDataAnalysisOutput: unable to open file for writing: " << filename.toStdString() << std::endl;
        delete file;
    }
}

void DedispersionDataAnalysisOutput::sendStream(const QString& /*streamName*/, const DataBlob* dataBlob)
{
    if( dataBlob->type() == "DedispersionDataAnalysis" ) {
        const DedispersionDataAnalysis* data = static_cast<const DedispersionDataAnalysis*>(dataBlob);
        foreach( QTextStream* out, _streams ) {
            foreach( const DedispersionEvent& e, data->events() ) {
                *out << e.timeBin() << "," << e.dm() << "," << e.amplitude() << "\n";
            }
        }
    }
}

} // namespace lofar
} // namespace pelican
